version: '3.8'

services:
  mongodb:
    image: mongo:latest
    volumes:
      - mongodb_data:/data/db
    configs:
      - source: mongo_init_script
        target: /docker-entrypoint-initdb.d/mongo-init.js
        mode: 0444
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=root
      - MONGO_INITDB_ROOT_PASSWORD_FILE=/run/secrets/mongo_root_password
    secrets:
      - mongo_root_password
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh --quiet
      interval: 5s
      timeout: 10s
      retries: 5

  minio:
    image: minio/minio
    healthcheck:
      test: curl -f http://localhost:9000/minio/health/live || exit 1
      interval: 30s
      timeout: 20s
      retries: 3
    volumes:
      - minio_data:/data
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      - MINIO_ROOT_USER=root
      - MINIO_ROOT_PASSWORD_FILE=/run/secrets/minio_root_password
    secrets:
      - minio_root_password
    command: server /data -console-address ":9001"

  portainer:
    image: portainer/portainer-ce:latest
    command: -H unix:///var/run/docker.sock
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - portainer_data:/data
    ports:
      - "9080:9000"
      - "9443:9443"
    deploy:
      placement:
        constraints:
          - node.role == manager

  # Dockploy services
  dokploy-postgres:
    image: postgres:16
    networks:
      - dokploy-network
    environment:
      POSTGRES_USER: dokployuser
      POSTGRES_DB: dokploy
      POSTGRES_PASSWORD_FILE: /run/secrets/postgres_password
    secrets:
      - postgres_password
    volumes:
      - postgres-database:/var/lib/postgresql/data
    deploy:
      placement:
        constraints:
          - node.role == manager

  dokploy-redis:
    image: redis:7
    networks:
      - dokploy-network
    volumes:
      - redis-data-volume:/data
    deploy:
      placement:
        constraints:
          - node.role == manager

  dokploy:
    image: dokploy/dokploy:latest
    networks:
      - dokploy-network
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /etc/dokploy:/etc/dokploy
      - dokploy-docker-config:/root/.docker
    ports:
      - "3000:3000"
    environment:
      - DATABASE_URL=postgres://dokployuser:{{ postgres_password }}@dokploy-postgres:5432/dokploy
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.role == manager
      update_config:
        parallelism: 1
        order: stop-first

  dokploy-traefik:
    image: traefik:v3.5.0
    networks:
      - dokploy-network
    volumes:
      - /etc/dokploy/traefik/traefik.yml:/etc/traefik/traefik.yml
      - /etc/dokploy/traefik/dynamic:/etc/dokploy/traefik/dynamic
      - /var/run/docker.sock:/var/run/docker.sock
    ports:
      - published: 80
        target: 80
        protocol: tcp
        mode: host
      - published: 443
        target: 443
        protocol: tcp
        mode: host
      - published: 443
        target: 443
        protocol: udp
        mode: host
    deploy:
      placement:
        constraints:
          - node.role == manager

volumes:
  mongodb_data:
  minio_data:
  portainer_data:
  postgres-database:
  redis-data-volume:
  dokploy-docker-config:

secrets:
  mongo_root_password:
    external: true
  minio_root_password:
    external: true
  postgres_password:
    external: true

configs:
  mongo_init_script:
    file: ./mongodb-init/mongo-init.js

networks:
  dokploy-network:
    driver: overlay
    attachable: true
