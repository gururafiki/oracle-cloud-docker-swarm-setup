---
- name: Setup environments
  hosts: all
  become: true
  gather_facts: true  # Enable fact gathering for all hosts
  tasks:
    - name: Update apt cache
      apt:
        update_cache: yes

    - name: Install dependencies
      apt:
        name:
          - apt-transport-https
          - ca-certificates
          - curl
          - software-properties-common
        state: present
        update_cache: yes

    - name: Add Docker GPG key
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present

    - name: Add Docker repository (AMD64)
      apt_repository:
        repo: "deb [arch=amd64] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable"
        state: present

    - name: Install Docker
      apt:
        name: docker-ce
        state: present

    - name: Add user to docker group
      user:
        name: ubuntu
        groups: docker
        append: yes

    - name: Install UFW firewall
      apt:
        name: ufw
        state: present

    - name: Remove iptables-persistent
      apt:
        name: iptables-persistent
        state: absent

    - name: Disable UFW temporarily
      ufw: 
        state: disabled

    - name: Flush iptables rules
      command: iptables -F

- name: Initialize Swarm on Manager
  hosts: manager
  become: true
  tasks:
    - name: Get swarm info
      command: docker info --format '{{"{{"}} json .Swarm {{"}}"}}'
      register: swarm_info
      changed_when: false

    - name: Set swarm facts
      set_fact:
        swarm_state: "{{ (swarm_info.stdout | from_json).LocalNodeState }}"
        is_manager: "{{ (swarm_info.stdout | from_json).ControlAvailable }}"

    - name: Leave existing swarm if active and not manager
      command: "docker swarm leave --force"
      when: swarm_state != "inactive" and not is_manager
      ignore_errors: yes
      changed_when: false

    - name: Initialize swarm if needed
      command: "docker swarm init --advertise-addr {{ private_ip }} --listen-addr {{ private_ip }}"
      when: swarm_state == "inactive" or not is_manager
      register: swarm_init

    - name: Get worker join token
      command: docker swarm join-token -q worker
      register: join_token
      changed_when: false

    - name: Set manager facts
      set_fact:
        manager_token: "{{ join_token.stdout | trim }}"
        manager_private_ip: "{{ private_ip }}"

- name: Join Workers
  hosts: workers
  become: true
  tasks:
    - name: Get worker swarm status
      command: docker info --format '{{"{{"}} .Swarm.LocalNodeState {{"}}"}}'
      register: swarm_status
      changed_when: false

    - name: Join swarm if not active
      command: "docker swarm join --token {{ hostvars[groups['manager'][0]].manager_token }} {{ hostvars[groups['manager'][0]].private_ip }}:2377"
      async: 120
      poll: 0
      when: swarm_status.stdout != "active"
      register: swarm_join


- name: Prepare Environment Files
  hosts: manager
  tasks:
    - name: Copy MongoDB init script directory
      copy:
        src: ../docker-compose/mongodb-init
        dest: /home/ubuntu/

- name: Create Docker Secrets from Control Environment
  hosts: manager
  tasks:
    - name: Read secrets.yaml file
      include_vars:
        file: ../docker-compose/secrets.yaml
        name: secrets

    - name: Check MongoDB root password secret
      command: docker secret inspect mongo_root_password
      ignore_errors: yes
      register: secret_check
      changed_when: false
      
    - name: Create MongoDB root password secret
      shell: echo -n "{{ secrets.MONGO_ROOT_PASSWORD }}" | docker secret create mongo_root_password -
      when: secret_check.rc != 0

    - name: Check MinIO password secret
      command: docker secret inspect minio_root_password
      ignore_errors: yes
      register: secret_check
      changed_when: false
      
    - name: Create MinIO password secret
      shell: echo -n "{{ secrets.MINIO_ROOT_PASSWORD }}" | docker secret create minio_root_password -
      when: secret_check.rc != 0

- name: Deploy Application Stack
  hosts: manager
  tasks:
    - name: Copy docker-compose file
      copy:
        src: ../docker-compose/docker-compose.yaml
        dest: /home/ubuntu/docker-compose.yaml

    - name: Deploy stack
      command: "docker stack deploy -c /home/ubuntu/docker-compose.yaml kappex"
